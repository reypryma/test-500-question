Closest Binary Search Tree Value - Binary Search Tree Operations

Introduction: Binary Search Trees (BSTs) are hierarchical data structures that store items in a sorted manner. Each node contains a value, and it has a left and right child. The values to the left are smaller, and the values to the right are larger. In this challenge, learners will harness the properties of a BST to determine the closest value to a given target.

STEPS:

    Initialize the closest value to the value of the root node.

    Traverse the BST. If the target is less than the current node's value, move to the left child; otherwise, move to the right child.

    On each node, compare the difference between the target and the current node's value with the difference between the target and the current closest value.

    Update the closest value if the current node's value is closer to the target.

    Continue traversing until a leaf node is reached.

    Return the closest value.

Requirements:

    Implement the function closestValue(TreeNode root, double target).

    The function should return an integer.

    The TreeNode class is given, which represents nodes in the BST.

Input:

    A root node of a BST and a target value as a double.

Output:

    An integer representing the closest value in the BST to the given target.

Examples:

    Given BST:
        4
       / \
      2   5
     / \
    1   3

    closestValue(root, 3.714286) -> 4

Constraints:

    The number of nodes in the tree will be between 1 and 104104.

    Every node has a unique integer value in the range of [-109109, 109109].

    The target value is a floating point in the range [-109109, 109109].

Expected Time Complexity:

    O(log‚Å°n)O(logn), where nn is the number of nodes in the BST. However, in the worst case, when the BST degenerates into a linked list, it can be O(n)O(n).

Expected Auxiliary Space:

    O(1)O(1).

Hint:

    Utilize the sorted nature of BSTs to decide whether to traverse left or right at each step.

Note:

    The given tree is a BST.