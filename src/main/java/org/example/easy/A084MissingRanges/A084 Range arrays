Missing Ranges - Array Operations

Introduction:
Given a sorted integer array and a specified range, identify the ranges of numbers that are missing from the array. This challenge will test your ability to work with ranges and gaps in sequences.

STEPS:

    Initialize a variable to the lower bound of the specified range.

    Traverse the sorted integer array.

    For each number, check if it matches the current expected value.

    If there's a gap, add the missing range to the result.

    Adjust the expected value accordingly based on the current number in the array.

    After processing the array, check for any missing ranges between the last number in the array and the upper bound of the specified range.

Requirements:

    Implement the function findMissingRanges(int[] nums, int lower, int upper).

    The function should return a list of strings.

    The function should handle edge cases, such as an empty array.

Input:

    A sorted array of integers, nums[].

    Two integers, lower and upper, representing the inclusive bounds of the range.

Output:

    A list of strings representing the missing ranges.

Examples:

    findMissingRanges([0, 1, 3, 50, 75], 0, 99) -> ["2", "4->49", "51->74", "76->99"]
    findMissingRanges([], 1, 1) -> ["1"]
    findMissingRanges([], -3, 3) -> ["-3->3"]
    findMissingRanges([1, 3, 5, 6], 1, 6) -> ["2", "4"]

Constraints:

    The array will have a length of at most 104104.

    Each integer in the array and the range bounds will be between −109−109 and 109109.

Expected Time Complexity:

    O(n)O(n), where nn is the length of the array.

Expected Auxiliary Space:

    O(1)O(1).

Hint:

    Traverse the array while keeping track of the next expected number. This will help in identifying gaps or missing ranges.

Note:

    The array is sorted, so you can rely on the order to simplify the logic.